- 기본적으로 장고 프로젝트 한 개당 한 개의 DB를 사용한다.
- 장고 프로젝트에는 기본적으로 관리프로그램이 내장되기 때문에

- postgresql 에 db 생성 및 계정생성 접근 권한 부여

1. create database pysite
2. create user pysite with password 'pysite';
3. grant all privileges on all tables in schema public to pysite;
4. data/pg_hba.conf 접근 설정

[root@localhost ~]# vi /cafe24/pgsql/data/pg_hba.conf

# TYPE  DATABASE        USER            ADDRESS                 METHOD

# "local" is for Unix domain socket connections only
local   all             postgres                                password
local   webdb           webdb                                   password
local   hr              hr                                      password
local   djdb            djdb                                    password

# IPv4 local connections:
host    all             postgres        127.0.0.1/32            password
host    webdb           webdb           127.0.0.1/32            password
host    djdb            djdb            127.0.0.1/32            password
host    webdb           webdb           192.168.1.0/24          password
host    hr              hr              192.168.1.0/24          password
host    djdb            djdb            192.168.1.0/24          password

[root@localhost ~]# /etc/init.d/postgres stop
Stopping PostgreSQL: ok
[root@localhost ~]# /etc/init.d/postgres start
Starting PostgreSQL: ok



- - pycharm 에서 Django 프로젝트 시작하기 - -

1. pycharm 프로젝트 생성(pysite 프로젝트)

2. Django 설치
    [터미널]
    pip install django

3. 장고 프로젝트 생성
    [터미널]
    django-admin startproject python_ch3

4. 디렉토리 정리
    -> pycharm 프로젝트와 django 프로젝트의 디렉토리 일치시키는 작업

5. psycopg2(postgres db lib) 설치
    [터미널]
        pip install psycopg2

6. settings.py 설정
    1) TIME_ZONE = 'Asia/Seoul'
    2) DATABASES = {
                    'default': {
                        'ENGINE': 'django.db.backends.postgresql',
                        'NAME': 'djdb',
                        'USER': 'djdb',
                        'PASSWORD': 'djdb',
                        'HOST': '192.168.1.138',
                        'PORT': 5432
                        }
                    }
    3) Template 디렉토리 설정
      TEMPLATES = [
      . . .

      'DIRS': [os.path.join(BASE_DIR, 'templates')],
      . . .

      python_ch3
          |
          |------  templates (생성)

    4) statics 디렉토리 설정 및 url 매핑(settings.py) ............. js, css, images 등등

    (1) settings.py 맨 밑에 추가

    STATICFILES_DIRS = (os.path.join(BASE_DIR, 'statics'),)
    STATIC_URL = '/assets/'

    (2) statics 폴더 만들고 그 안에 css, images, js 폴더 복붙..


7. 장고 프로젝트의 기본 관리 어플리케이션이 사용하는 테이블을 생성
    [터미널]
    python manage.py migrate

8. 장고 프로젝트의 기본 관리 어플리케이션 로그인 계정 생성
    (관리 계쩡 생성하기)
    [터미널]
    python manage.py createsuperuser

9. 지금까지 작업 내용 확인하기
    [터미널]
    python manage.py runserver 0.0.0.0:8888

=====================================================

Application 작업 (순서 뒤바뀌면 안될 수 있슴다.)

1) main

1. 어플리케이션 추가하기 (main 디렉토리가 생성될 것이다.)
    [터미널]
    python manage.py startapp main

2. 어플리케이션 등록 (settings.py)

    # Application definition

    INSTALLED_APPS = [
           'main',
            ...,
            ...
    ]

3. template
        |---- main
    어플리케이션 template 디렉토리 생성

4. Model 정의(생략)

5. urls.py에서 url-view의 handler 매핑

6. views.py에서 핸들러 함수 구현(요청처리, 모델작업, 응답처리)

7. 화면이 필요한 경우, 해당 template 작업



++++++++++++++++++++++++++++++

2) user

1. 어플리케이션 추가하기 (user 디렉토리가 생성될 것이다.)
    [터미널]
    python manage.py startapp user

2. 어플리케이션 등록 (settings.py)

    # Application definition

    INSTALLED_APPS = [
           'user',
            ...,
            ...
    ]

3. template
        |---- user
    어플리케이션 template 디렉토리 생성

4-1. Model 정의
4-2. admin.py에
    admin.site.register(user)
4-3. migrations 이름의 DDL python 모듈을 생성
    [터미널]
    python manage.py makemigrations
4-4. 물리DB와 스키마 동기화 작업을 한다.
    [터미널]
    python manage.py migrate

5. urls.py에서 url-view의 handler 매핑

6. views.py에서 핸들러 함수 구현(요청처리, 모델작업, 응답처리)

7. 화면이 필요한 경우, 해당 template 작업